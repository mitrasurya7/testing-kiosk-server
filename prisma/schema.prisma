// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  username   String    @unique @db.VarChar(100)
  email      String    @unique @db.VarChar(100)
  password   String    @db.VarChar(100)
  role       String    @db.VarChar(100)
  token      String?   @db.Uuid
  location   Location? @relation(fields: [locationId], references: [id])
  locationId Int
  contents   Content[]
  updateAt   DateTime  @default(now())
  createdAt  DateTime  @default(now())

  @@map("users")
}

model Location {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  parentId  Int?
  users     User[]
  devices   Device[]
  updateAt  DateTime @default(now())
  createdAt DateTime @default(now())

  @@map("locations")
}

model Device {
  deviceId     String    @unique @db.VarChar(100)
  name         String    @db.VarChar(100)
  status       Boolean   @default(false)
  last_online  DateTime?
  last_offline DateTime?
  location     Location? @relation(fields: [locationId], references: [id])
  locationId   Int
  template     Template? @relation(fields: [templateId], references: [id])
  templateId   Int

  @@map("devices")
}

model Template {
  id            Int       @id @default(autoincrement())
  name          String    @db.VarChar(100)
  html_template String    @db.Text
  contents      Content[]
  device        Device[]

  @@map("templates")
}

model Content {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(100)
  type       String    @db.VarChar(100)
  url        String    @db.VarChar(100)
  template   Template? @relation(fields: [templateId], references: [id])
  templateId Int?
  user       User?     @relation(fields: [userId], references: [id])
  userId     Int?

  @@map("contents")
}
